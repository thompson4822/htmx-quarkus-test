- **Verify HTMX Request URLs:** When an HTMX request fails, first verify the request URL in the `hx-get` or `hx-post` attribute. Ensure it matches the full, combined path of the JAX-RS resource, including both class-level and method-level `@Path` annotations (e.g., a class `@Path("/reading-list")` and a method `@Path("/books")` results in the endpoint `/reading-list/books`).
- **Verify HTMX Target Selectors:** Ensure that the CSS selector in an `hx-target` attribute correctly and uniquely identifies an element in the DOM. A common error is targeting an ID (e.g., `#my-target`) when the element only has a class or is missing the ID attribute entirely.
- HTMX Out-of-Band Swaps: When performing Out-of-Band (OOB) swaps, ensure the server returns a single, valid HTML fragment. Wrap multiple OOB elements in an inert container (e.g., a [<div>](cci:2://file:///home/steve/QuarkusProjects/htmx-test/src/main/kotlin/com/sthompson/readingList/Book.kt:2:0-2:68)) to prevent parsing errors in the browser.
- Client-Side Form Resets: For a better user experience, automatically reset forms after a successful submission using the hx-on::after-request attribute.
- When checking for an HTMX request on the server, check for the explicit value of the HX-Request header (e.g., hxRequest == "true"). This is more robust than checking for null or blank values, which can be inconsistent across different environments and testing frameworks.
- Resource methods that serve both full pages and HTMX fragments must use the HX-Request header to differentiate the context. A standard request should render the full page template, while an HTMX request (where HX-Request is "true") should render the specific partial fragment.
- Document all HTMX-related resource methods using KDoc. The documentation must include a summary of the fragment's purpose and use custom tags (`@htmx-trigger`, `@htmx-target`, `@htmx-swap`) to detail the HTMX attributes involved.