- Extend PanacheEntity or PanacheEntityBase for database entities. Place query logic in companion objects or repositories.
- Use `open` for JPA entities to enable Hibernate proxies for lazy loading.
- Always favor PanacheQuery objects for efficient query execution.
- Favor constructor initialization of entity properties; minimize use of setters.
- To decouple the persistence layer from the view/API layer, create Data Transfer Objects (DTOs) and use a dedicated Mapper class to convert between entities and DTOs.
- Perform data formatting and presentation-specific logic within the Mapper class, not in the Qute template. For example, a set of author entities should be converted to a formatted string in the mapper before being passed to the view.
- For case-insensitive searches, use the standard SQL lower() function instead of database-specific operators like ilike to ensure query portability.
- When annotating constructor parameters that are also properties (e.g., `val foo: Bar`), always explicitly specify the annotation target if the compiler warns about ambiguity.
- For annotations like `@Location` that are meant for constructor parameters, use the `@param:` target:
  ```kotlin
    class MyClass(@param:Location("...") val foo: Bar)
  ```
- Do not use `@property:` unless the annotation is intended for the property.
- Reference: [KT-73255](https://youtrack.jetbrains.com/issue/KT-73255)
